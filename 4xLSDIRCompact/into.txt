@news @Wiki Editor
**Name:** 4xLSDIRCompact
**License:** CC BY 4.0
**Link:** https://drive.google.com/file/d/1cdGyJewgcY8DwT-D5JrqDHxlL_ZDw3qH  
**Model Architecture:** ESRGAN Compact
**Scale:** 4
**Purpose:** Upscale small good quality photos to 4x their size

**Iterations:** 160000
**batch_size:** Variable(1-10)
**HR_size:** 256
**Dataset:** LSDIR
**Dataset_size:** 84991
**OTF Training** No
**Pretrained_Model_G:** 4x_Compact_Pretrain.pth

**Description:** My first ever model ðŸ˜€ Well, itâ€™s not the best, but, itâ€™s something ;) 
I provide some 15 examples from the validation set here for you to visually see the generated output (with chaiNNer), photo dimensions are in the name: https://imgsli.com/MTYxNDk3 




@news @Wiki Editor
Releasing two models I have been working on to extend my previous one:

**Name:** 4xLSDIRCompactC
**License:** CC BY 4.0
**Link:** https://drive.google.com/file/d/1uoU8Q6L2F0LL_pgfbbTROJxtI_OOj47B
**Model Architecture:** ESRGAN Compact
**Scale:** 4
**Purpose:** Upscale small photos with compression to 4x their size

**Iterations:** 190000
**batch_size:** Variable(1-10)
**HR_size:** 256
**Dataset:** LSDIR
**Dataset_size:** 84991
**OTF Training** No
**Pretrained_Model_G:** 4xLSDIRCompact.pth

**Description:** Trying to extend my previous model to be able to handle compression (JPG 100-30) by manually altering the training dataset, since 4xLSDIRCompact cant handle compression. Use this instead of 4xLSDIRCompact if your photo has compression (like an image from the web). 


**Name:** 4xLSDIRCompactR
**License:** CC BY 4.0
**Link:** https://drive.google.com/file/d/1t4-CQc9jfJqt75r7xXI2vQxXOs-zDJt8 
**Model Architecture:** Real-ESRGAN Compact
**Scale:** 4
**Purpose:** Upscale small photos with compression, noise and slight blur to 4x their size

**Iterations:** 130000
**batch_size:** Variable(1-5)
**HR_size:** 256
**Dataset:** LSDIR
**Dataset_size:** 84991
**OTF Training** No
**Pretrained_Model_G:** 4xLSDIRCompact.pth

**Description:** Extending my last 4xLSDIRCompact model to Real-ESRGAN, meaning trained on synthetic data instead to handle more kinds of degradations, it should be able to handle compression, noise, and slight blur.

Here is a comparison to show that 4xLSDIRCompact cannot handle compression artifacts, and that these two models will produce better output for that specific scenario. These models are not â€˜betterâ€™ than the previous one, they are just meant to handle a different use case: https://imgsli.com/MTYyODY3 


















@news @Wiki Editor
**Name:** 4xLSDIRCompactv2
**License:** CC BY 4.0
**Link:** https://drive.google.com/file/d/1nnhovhW3XMsgnXhx5ILATFvzAhtT8R-2   
**Model Architecture:** SRVGG
**Scale:** 4
**Purpose:** Upscale photos to x4 their size

**Iterations:** CompactC 205â€™000 & CompactR 150â€™000
**batch_size:** Variable(1-10)
**HR_size:** 256
**Dataset:** LSDIR
**Dataset_size:** 84991
**OTF Training** No
**Pretrained_Model_G:** 4x_Compact_Pretrain.pth

**Description:** 4xLSDIRCompactv2 supersedes the previously released models, it combines all my progress on my compact model. Both CompactC and CompactR had received around 8 hours more training since release with batch size 10 (CompactR had only been up to 5 on release), and these two were then interpolated together. This allows v2 to handle some degradations, while preserving the details of the CompactC model. Examples: https://imgsli.com/MTY0Njgz/0/2 





















@news @Wiki Editor
**Name:** 4xLSDIRCompactv3
**License:** CC BY 4.0
**Link:** https://drive.google.com/file/d/1nnhovhW3XMsgnXhx5ILATFvzAhtT8R-2   
**Model Architecture:** SRVGG
**Scale:** 4
**Purpose:** Upscale photos to x4 their size

**Iterations:** CompactC 205â€™000 & CompactR 192â€™500
**batch_size:** Variable(1-45)
**HR_size:** 256
**Dataset:** LSDIR
**Dataset_size:** 10000-84991 (hr only, with lr its doubled)
**OTF Training** No
**Pretrained_Model_G:** 4x_Compact_Pretrain.pth

**Description:** I am releasing this model with all its sub-versions. 4xLSDIRCompactv3 supersedes the previously released models. Both CompactC and CompactR had received around 30 + hours more training since with batch size 20-36 (+ CompactR batch size 45 with 6.3h additionally). This model is an interpolation of my 4xLSDIRCompactCv3 and 4xLSDIRCompactRv3 models/weights which are released below.

Examples: 
Comparison with previous version: 
Total Training Time (TTT): X (32+ hours for 4xLSDIRCompact + 71+ hours for 4xLSDIRCompactRv1-3 + 4xLSDIRCompactCv1-3)



**Name:** 4xLSDIRCompactRv3
**License:** CC BY 4.0
**Link:** https://drive.google.com/file/d/1nnhovhW3XMsgnXhx5ILATFvzAhtT8R-2   
**Model Architecture:** SRVGG
**Scale:** 4
**Purpose:** Upscale (degraded) photos to x4 their size

**Iterations:** 192â€™500
**batch_size:** Variable(1-45)
**HR_size:** 256
**Dataset:** LSDIR
**Dataset_size:** 10000-84991 hr images
**OTF Training** No
**Pretrained_Model_G:** 4xLSDIRCompact.pth

**Description:** 4xLSDIRCompactRv2 had used the Real-ESRGAN approach with purely synthetic data from the 85k hr images from the LSDIR dataset to handle multiple types of degradation. v3 had received around 36h more training in comparison to v2, with batch sizes 20, 36 and 45. Because of local GPU limits, remote instances had been used for this part. Details about my process are in the â€˜Batch Pointsâ€™ Link.

Total Training Time: 71+ hours
Examples:
Batch Points:
Config File:



**Name:** 4xLSDIRCompactCv3
**License:** CC BY 4.0
**Link:** https://drive.google.com/file/d/1nnhovhW3XMsgnXhx5ILATFvzAhtT8R-2   
**Model Architecture:** SRVGG
**Scale:** 4
**Purpose:** Upscale compressed photos to x4 their size

**Iterations:** CompactC 205â€™000
**batch_size:** Variable(1-45)
**HR_size:** 256
**Dataset:** LSDIR
**Dataset_size:** 10000-84991 (hr only, with lr its doubled)
**OTF Training** No
**Pretrained_Model_G:** 4x_Compact_Pretrain.pth

**Description:** 4xLSDIRCompactCv3 is able to handle JPG compression (30-100).. 

Examples: 
Batch Points: 
Total Training Time (TTT): X (4xLSDIRCompact + 4xLSDIRCompactRv1-3 + 4xLSDIRCompactCv1-3) 




Sub-Models:
4xLSDIRCompactv3 Release: Link
4xLSDIRCompactRv3 Examples: 
4xLSDIRCompactCv3 Release: Link
4xLSDIRCompactCv3 Examples:









LSDIR
2023-03-19 17:37:55 - 2023-03-20 06:33:51
2023-03-20 18:50:42 - 023-03-20 20:24:09
2023-03-20 20:28:18 - 2023-03-21 06:57:11
2023-03-21 23:29:05 - 2023-03-22 06:53:35
-> 13h + 2h + 10h + 7h - 32+ hours Training Time



LSDIRR
2023-03-16 08:35:35 - 2023-03-16 14:05:22
2023-03-16 14:10:11 - 2023-03-16 14:52:43
2023-03-17 00:40:06 - 2023-03-17 07:33:13
2023-03-17 09:31:33 - 2023-03-17 11:52:02
2023-03-17 13:52:28 - 2023-03-17 15:09:29
2023-03-23 23:16:17 - 2023-03-24 06:45:38
6h + 1 + 7 + 2 + 2 + 7 - 25h
V3 - + 36+ hours of training -> 71+hours

LSDIRC

2023-03-12 22:24:46 - 2023-03-13 07:18:10   0-180k
2023-03-16 18:10:32 - 2023-03-16 19:49:41 155k
2023-03-16 19:57:38 - 2023-03-16 23:50:05 165k
2023-03-17 07:42:13 - 2023-03-17 09:30:15 184k
2023-03-17 11:53:52 - 2023-03-17 13:51:10 190k
2023-03-24 21:46:08 - 2023-03-25 04:49:55 208k
9 + 2 + 4 + 2 + 2 + 7 - so far 26 + hours for v1-2
@news @Wiki Editor
I am releasing the Series 3 from my 4xLSDIRCompact models. In general my suggestion is, if you have good quality input images use [4xLSDIRCompactN](https://drive.google.com/file/d/1rn6TxfRe9cWjrub0lW3dfL9HHbOoGtJm), 
otherwise try [4xLSDIRCompactC3](https://drive.google.com/file/d/1LMSeS5jZ0RDyXvXYBeip36xbKoaLLvJZ) or an interpolation between C3 and R3 like [this](https://drive.google.com/file/d/1lj8CR9eK5u2hOpEkl1OeHpY5FZvI5qpk). 

[Examples](https://imgsli.com/MTY4NTc5) with its [files](https://drive.google.com/drive/folders/1CIHGv0t2GdyEUwL0m-29NnLC1l9MKFHb) 

Since the message became too long for me to post here (no discord nitro), I uploaded the model details as a txt file.

**Name:** 4xLSDIRCompactN
**License:** CC BY 4.0
**Link:** https://drive.google.com/file/d/1rn6TxfRe9cWjrub0lW3dfL9HHbOoGtJm 
**Model Architecture:** SRVGG
**Scale:** 4
**Purpose:** Upscale good quality input photos to x4 their size
**Iterations:** 185'000
**batch_size:** Variable(1-10)
**HR_size:** 256
**Dataset:** LSDIR
**Dataset_size:** 84991 hr + 84991 lr
**OTF Training** No
**Pretrained_Model_G:** 4x_Compact_Pretrain.pth
**Description:** The original 4xLSDIRCompact a bit more trained, cannot handle degradation
**Total Training Time:** 32+ hours

**Name:** 4xLSDIRCompactC3
**License:** CC BY 4.0
**Link:** https://drive.google.com/file/d/1LMSeS5jZ0RDyXvXYBeip36xbKoaLLvJZ 
**Model Architecture:** SRVGG
**Scale:** 4
**Purpose:** Upscale compressed photos to x4 their size
**Iterations:** 230â€™000
**batch_size:** Variable(1-20)
**HR_size:** 256
**Dataset:** LSDIR
**Dataset_size:** 8000-84991 hr& lr
**OTF Training** No
**Pretrained_Model_G:** 4xLSDIRCompact
**Description:** Able to handle JPG compression (30-100).
**Total Training Time:** 33+ hours

**Name:** 4xLSDIRCompactR3
**License:** CC BY 4.0
**Link:** https://drive.google.com/file/d/1_UrO5UwADJyfOpKWp5y81USFCAgG-z3-
**Model Architecture:** SRVGG
**Scale:** 4
**Purpose:** Upscale (degraded) photos to x4 their size
**Iterations:** 192â€™500
**batch_size:** Variable(1-45)
**HR_size:** 256
**Dataset:** LSDIR
**Dataset_size:** 10000-84991 hr& lr
**OTF Training** No
**Pretrained_Model_G:** 4xLSDIRCompact.pth
**Description:** Trained on synthetic data, meant to handle more degradations
**Total Training Time:**  86+ hours


